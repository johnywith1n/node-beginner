// Generated by CoffeeScript 1.6.3
(function() {
  var formidable, fs, querystring, root, show, start, upload;

  querystring = require("querystring");

  fs = require("fs");

  formidable = require("formidable");

  start = function(response, request) {
    var body;
    console.log("Request handler 'start' was called");
    body = '<html>' + '<head>' + '<meta http-equiv="Content-Type" ' + 'content="text/html; charset=UTF-8" />' + '</head>' + '<body>' + '<form action="/upload" enctype="multipart/form-data" ' + 'method="post">' + '<input type="file" name="upload" multiple="multiple">' + '<input type="submit" value="Upload file" />' + '</form>' + '</body>' + '</html>';
    response.writeHead(200, {
      "Content-type": "text/html"
    });
    response.write(body);
    response.end();
  };

  upload = function(response, request) {
    var form;
    console.log("Request handler 'upload' was called");
    form = new formidable.IncomingForm();
    console.log("about to parse");
    form.parse(request, function(error, fields, files) {
      console.log("parsing done");
      fs.rename(files.upload.path, "/tmp/test.png", function(error) {
        if (error) {
          fs.unlink("/tmp/test.png");
          fs.rename(files.upload.path, "/tmp/test.png");
        }
      });
    });
    response.writeHead(200, {
      "Content-Type": "text/html"
    });
    response.write("received image:<br/>");
    response.write("<img src='/show' />");
    response.end();
  };

  show = function(response, request) {
    console.log("Request handler 'show' was called.");
    fs.readFile("/tmp/test.png", "binary", function(error, file) {
      if (error) {
        response.writeHead(500, {
          "Content-Type": "text/plain"
        });
        response.write(error + "\n");
        response.end();
      } else {
        response.writeHead(200, {
          "Content-Type": "image/png"
        });
        response.write(file, "binary");
        response.end();
      }
    });
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.start = start;

  root.upload = upload;

  root.show = show;

}).call(this);
